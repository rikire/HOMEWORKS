#include <iostream>
#include <vector>
#include <string>
#include <sstream>
using namespace std;

class Long_number{
private:
    vector <int> v;
    bool is_pos = true;
    const int D = 1000000; // система счисления
    const int C = 6; // кол-во разрядов
    int str_to_int(string str){
            istringstream istr(str);
            int number;
            istr >> number;
            return number;
    }
    Long_number add(Long_number left, Long_number right){
    }
    Long_number substract(Long_number left, Long_number right){
    }
public:
    Long_number(string s){
        if(s[0]=='-'){
            is_pos = false;
            s = s.substr(1,s.size()-1);
        }
        int k = s.size()/C;
        if (s.size()%C!=0){
            k++;
        }
        v = vector<int>(k,0);
        int i = s.size() - C;
        int j = 0;
        while (i>0){
            string s1 = s.substr(i,C);
            int x = str_to_int(s1);
            v[j]=x;
            j++;
            i-=C;
        }
        string s1 = s.substr(0,i+C);
        int x = str_to_int(s1);
        v[j]=x;
    }
    Long_number(){
        v.push_back(0);
    }
    Long_number& operator= (const Long_number &right){
        is_pos = right.is_pos;
        v = right.v;
        return *this;
    }
    Long_number operator+(Long_number right){
        Long_number sum;
        vector <int> v_min;
        int s, r = 0;
        int r_len = v.size();
        int l_len = right.v.size();
        if(r_len > l_len){
            sum.v = v;
            v_min = right.v;
        }
        else{
            sum.v = right.v;
            v_min = v;
        }
        int i;
        for(i=0;i<v_min.size();i++){
            s = sum.v[i] + v_min[i] + r;
            r = s/D;
            sum.v[i] = s%D;
        }
        for(;i<sum.v.size();i++){
            s = sum.v[i] + r;
            r = s/D;
            sum.v[i] = s%D;
        }
        return sum;
    }
    Long_number operator-(Long_number right){
        Long_number sum;
        vector <int> v_min;
        int s, r = 0;
        int r_len = v.size();
        int l_len = right.v.size();
        if(r_len > l_len){
            sum.v = v;
            v_min = right.v;
        }
        else{
            sum.v = right.v;
            v_min = v;
        }
        int i;
        for(i=0;i<v_min.size();i++){
            s = sum.v[i] - v_min[i] - r;
            if(s<0){
                r = 1;
                s += D;
            }
            else{
                r = 0;
            }
            sum.v[i] = s;
        }
        for(;i<sum.v.size();i++){
            s = sum.v[i] - r;
            if(s<0){
                r = 1;
                s += D;
            }
            else{
                r = 0;
            }
            sum.v[i] = s;
        }
        return sum;
    }
    void print(){
        if(!is_pos){
            cout<<"-";
        }
        int k = v.size()-1;
        cout<<v[k];
        for(k-=1;k>=0;k--){
            int M = D/10;
            int x = v[k];
            while(M>0){
                cout<<x/M;
                x%=M;
                M/=10;
            }
        }
        cout<<endl;
    }
};

int main()
{
    Long_number numb("-3216568713546513");
    numb.print();
    Long_number numb2("1348649687213241654");
    Long_number numb3;
    numb3 = numb + numb2;
    numb3.print();
}
